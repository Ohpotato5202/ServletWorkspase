<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="student">
	<!-- <insert id="각 sql문들의 식별자"parametertyper" 매개변수로 전달받은 자바타입 혹은 별칭"> </insert> 
		<update> <delete> -값 전달시 파라미터가 vo클래스일시 : #{getter에서 get을 제외하고 소문자로 시작하는 이름} 
		기본자료형으로 전달받았을때 #{변수명} Map객체로 전달받았을때 #{map의 key값} - jdbc의 ?를 대신하는 문법 -->

	<!-- 값전달시 #{getter에서 get을 제외하고 소문자로 시작하는 이름} -->
	<insert id="insertStudent" parameterType="student">
		INSERT INTO STUDENT(NO, NAME, TEL)
		VALUES(SEQ_STUDENT_NO.NEXTVAL, #{name},#{tel})
	</insert>

	<insert id="insertStudentMap">
		INSERT INTO STUDENT(NO,NAME,TEL)
		VALUES(SEQ_STUDENT_NO.NEXTVAL, #{name},#{tel} )
	</insert>

	<!-- <select id="식별자" parameterType="매개변수로 전달받은 자바타입 혹은 별칭" resultType="조회 
		결과를 반환하고자 하는 자바타입" resultMap="조회결과를 뽑아서 매핑을 해줄 resultMap의 id값" - select태그는 
		resultType/resultMap 둘 중 하나는 반드시 작성해야함.(필수 속성) - resultType.resultMap? 반환받을 
		값의 자료형. 바바의 기본자료형,vo클래스를 넣어주면 지정된 자료형에 맞춰서 결과갑(Resultset)자동으로 매핑해줌. - DML태그들은 
		반환형이 int고정이기 때문에 생략 가능 -->
	<select id="selectStudentCount" resultType="int">
		SELECT COUNT(*)
		FROM STUDENT
	</select>

	<!-- 학생 1명의 정보를 조회한다? if(){ Stundent s = Student(); s.setName(rset.getString("NAME")); 
		s.setTel(rset.getString("TEL")); } 마이바티스의 ResultSet -> VO 자동 변환규칙 1. resultType으로 
		지정한 자료형의 기본생성자 호출 2. VO클래스의 필드명과 조회된 DB의 칼럼명이 일치하는 경우 필드의 setter함수를 호출 3. 
		DB의 자료형 java의 자료형 형변환 vachar2, char -> String number -> int/double date -> 
		java.util.Date 필드명과 칼럼명이 불일치 하는 경우 해결법 1. 별칭지정(대소문자 구분위해 "" 추가) 2. resultMap 
		- db컬럼과 vo필드를 연결 3. mybatis-config.xml의 설정중 mapUnderscoreToCalme true -> 
		언터스코어 표기법을 카멀케이스 표기법으로 변경해주는 속성 -->
	<!-- <resultMap type="" id=""></resultMap> -->
	<select id="selectOneStudent" parameterType="int"
		resultType="student">
		SELECT *
		FROM STUDENT
		WHERE NO = #{NO}
	</select>

	<select id="selectOneStudentMap" parameterType="int"
		resultMap="studentVoMap">
		SELECT * FROM STUDENT
		WHERE NO = #{NO}
	</select>

	<update id="updateStudent">
		UPDATE STUDENT SET
		NAME = #{name} ,
		TEL = #{tel}
		WHERE
		NO = #{no}
	</update>

	<delete id="deleteStudent">
		DELETE FROM
		STUDENT
		WHERE NO = #{no}
	</delete>

	<!-- rsultMap - colum과 property명이 동일하다면 해당태그는 생략가능 - resultMap 재사용가능 - 복잡한 
		매핑처리시 효율적임 - Board - List<Reply> -->
	<resultMap id="studentVoMap" type="map">
		<!-- pk 칼럼용 태그(id) -->
		<id column="no" property="no" />
		<!-- 나머지 칼럼 -->
		<!-- <result column="name" property="name" /> <result column="tel" property="tel" 
			/> -->
		<result column="reg_date" property="regDate" />
	</resultMap>

	<select id="selectStudentList" resultType="student">
		SELECT * FROM STUDENT
		ORDER BY NO DESC
	</select>

	<!-- List<Map<Strinf, Object>> list형태로 데이터 조회하는 코드 작성후, -->
	<select id="selectStudentMapList" resultType="map">
		SELECT
		NO "no",
		NAME "name",
		TEL "tel",
		REG_DATE "regDate"
		FROM STUDENT
		ORDER BY NO DESC
	</select>


</mapper>